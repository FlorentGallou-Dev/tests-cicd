name: docker-build-push
run-name: ${{ github.actor }} is docker building - testing - deploying
on:
  push:
    branches: [ main ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            node_modules
            /home/runner/.cache/cypress
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - run: npm install
      - run: npm run build
  
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            node_modules
            /home/runner/.cache/cypress
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - run: npm run e2e:headless
      - uses: actions/upload-artifact@v3
        with:
          name: e2e-video
          path: cypress/videos/
  deploy-image:
    runs-on: ubuntu-latest
    needs: [build-and-push-image, test]
    steps:

    - uses: tzzs/server-shell@v3                # action to connect to server via SSH
      with:                                     # can find secrets.vars in github/repo/Settings > Secrets and variables
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY}}  # is my local private ssh key for my ssh connection
        USERNAME: ${{secrets.SSH_USER}}
        IP: ${{secrets.HOST}}
        PORT: ${{secrets.PORT}}
        SHELL: |                                # execute command to update docker container from github packages and run container
          "sudo docker compose -f docker-compose.prod.yml up -d --pull always"